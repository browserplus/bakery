diff -durN mongoose.orig/mongoose.c mongoose/mongoose.c
--- mongoose.orig/mongoose.c	2011-05-19 13:00:59.000000000 -0700
+++ mongoose/mongoose.c	2011-05-19 16:37:09.000000000 -0700
@@ -221,7 +221,10 @@
 #define MAX_CGI_ENVIR_VARS 64
 #define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))
 
-#if defined(DEBUG)
+// We don't want this debug console logging - bad during unit tests.
+// If desired, we could route this logging (even in release) through
+// mongoose cry(), which uses a flexible log callback.
+#if defined(MONGOOSE_DEBUG)
 #define DEBUG_TRACE(x) do { \
   flockfile(stdout); \
   printf("*** %lu.%p.%s.%d: ", \
@@ -421,7 +424,7 @@
   "l", "access_control_list", NULL,
   "M", "max_request_size", "16384",
   "m", "extra_mime_types", NULL,
-  "p", "listening_ports", "8080",
+  "p", "listening_ports", "0",
   "r", "document_root",  ".",
   "s", "ssl_certificate", NULL,
   "t", "num_threads", "10",
@@ -3298,6 +3301,10 @@
   }
 }
 
+#ifndef INADDR_LOOPBACK
+#define INADDR_LOOPBACK (u_int32_t)0x7f000001
+#endif // INADDR_LOOPBACK
+
 // Valid listening port specification is: [ip_address:]port[s|p]
 // Examples: 80, 443s, 127.0.0.1:3128p, 1.2.3.4:8080sp
 static int parse_port_string(const struct vec *vec, struct socket *so) {
@@ -3308,11 +3315,15 @@
   memset(so, 0, sizeof(*so));
 
   if (sscanf(vec->ptr, "%d.%d.%d.%d:%d%n", &a, &b, &c, &d, &port, &len) == 5) {
-    // IP address to bind to is specified
-    usa->u.sin.sin_addr.s_addr = htonl((a << 24) | (b << 16) | (c << 8) | d);
+// For security, disable this mode.
+//    // IP address to bind to is specified
+//    usa->u.sin.sin_addr.s_addr = htonl((a << 24) | (b << 16) | (c << 8) | d);
+    return (INVALID_SOCKET);
   } else if (sscanf(vec->ptr, "%d%n", &port, &len) == 1) {
-    // Only port number is specified. Bind to all addresses
-    usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+// For security, only use loopback.
+//    // Only port number is specified. Bind to all addresses
+//    usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+    usa->u.sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
   } else {
     return 0;
   }
@@ -3331,6 +3342,7 @@
   return 1;
 }
 
+// Return bound port number, or 0 on failure.
 static int set_ports_option(struct mg_context *ctx) {
   const char *list = ctx->config[LISTENING_PORTS];
   int reuseaddr = 1, success = 1;
@@ -3377,6 +3389,23 @@
     close_all_listening_sockets(ctx);
   }
 
+  if (success) {
+    struct usa sa;
+    memset((void *) &sa, 0, sizeof(sa));
+    sa.len = sizeof(sa.u.sin);
+    if (getsockname(sock, &sa.u.sa, &sa.len) != 0) {
+        return 0;
+    }
+    int port = ntohs((uint16_t) sa.u.sin.sin_port);
+    // If we are to bound to ephemeral, then save the current port in context config.
+    // Now future get_option requests will ensure the correct port is returned.
+    if (ctx->config[LISTENING_PORTS] == NULL || 0 == strcmp(ctx->config[LISTENING_PORTS], "0")) {
+        char sz[32];
+        sprintf(sz, "%d", port);
+        ctx->config[LISTENING_PORTS] = mg_strdup(sz);
+    }
+    return port;
+  }
   return success;
 }
 
@@ -3900,14 +3929,19 @@
 
     close_connection(conn);
   }
-  free(conn);
 
-  // Signal master that we're done with connection and exiting
-  (void) pthread_mutex_lock(&ctx->mutex);
-  ctx->num_threads--;
-  (void) pthread_cond_signal(&ctx->cond);
-  assert(ctx->num_threads >= 0);
-  (void) pthread_mutex_unlock(&ctx->mutex);
+  // It's possible to have a connection for which get_socket()
+  // immediately returns false, resulting in a null ctx
+  if (conn->ctx != NULL) {
+    // Signal master that we're done with connection and exiting
+    pthread_mutex_lock(&(conn->ctx->mutex));
+    conn->ctx->num_threads--;
+    pthread_cond_signal(&(conn->ctx->cond));
+    assert(conn->ctx->num_threads >= 0);
+    pthread_mutex_unlock(&(conn->ctx->mutex));
+  }
+
+  free(conn);
 
   DEBUG_TRACE(("exiting"));
 }
@@ -4045,14 +4079,19 @@
   while (ctx->stop_flag != 2) {
     (void) sleep(0);
   }
-  free_context(ctx);
+}
+
+void
+mg_destroy( struct mg_context *ctx)
+{
+    free_context(ctx);
 
 #if defined(_WIN32) && !defined(__SYMBIAN32__)
   (void) WSACleanup();
 #endif // _WIN32
 }
 
-struct mg_context *mg_start(mg_callback_t user_callback, void *user_data,
+struct mg_context *mg_create(mg_callback_t user_callback, void *user_data,
                             const char **options) {
   struct mg_context *ctx;
   const char *name, *value, *default_value;
@@ -4119,11 +4158,15 @@
   (void) pthread_cond_init(&ctx->cond, NULL);
   (void) pthread_cond_init(&ctx->sq_empty, NULL);
   (void) pthread_cond_init(&ctx->sq_full, NULL);
+  return ctx;
+}
 
+int mg_start(struct mg_context *ctx) {
   // Start master (listening) thread
-  start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
+  int success = start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
 
   // Start worker threads
+  int i;
   for (i = 0; i < atoi(ctx->config[NUM_THREADS]); i++) {
     if (start_thread(ctx, (mg_thread_func_t) worker_thread, ctx) != 0) {
       cry(fc(ctx), "Cannot start worker thread: %d", ERRNO);
@@ -4131,6 +4174,22 @@
       ctx->num_threads++;
     }
   }
+  return success == 0 ? ctx : NULL;
+}
 
+void *mg_set_options(struct mg_context *ctx, const char **options) {
+  const char *name = NULL, *value = NULL;
+  int i = 0;
+  while (options && (name = *options++) != NULL) {
+    if ((i = get_option_index(name)) == -1) {
+      cry(fc(ctx), "Invalid option: %s", name);
+      return NULL;
+    } else if ((value = *options++) == NULL) {
+      cry(fc(ctx), "%s: option value cannot be NULL", name);
+      return NULL;
+    }
+    ctx->config[i] = mg_strdup(value);
+    DEBUG_TRACE(("[%s] -> [%s]", name, value));
+  }
   return ctx;
 }
diff -durN mongoose.orig/mongoose.h mongoose/mongoose.h
--- mongoose.orig/mongoose.h	2011-05-19 13:00:58.000000000 -0700
+++ mongoose/mongoose.h	2011-05-19 13:01:18.000000000 -0700
@@ -79,7 +79,7 @@
                                 const struct mg_request_info *request_info);
 
 
-// Start web server.
+// Create web server.
 //
 // Parameters:
 //   callback: user defined event handling function or NULL.
@@ -99,17 +99,24 @@
 //
 // Return:
 //   web server context, or NULL on error.
-struct mg_context *mg_start(mg_callback_t callback, void *user_data,
+struct mg_context *mg_create(mg_callback_t callback, void *user_data,
                             const char **options);
 
+// Start the web server.
+// Return 1 on success, 0 on error
+int mg_start(struct mg_context *ctx);
+
 
 // Stop the web server.
 //
-// Must be called last, when an application wants to stop the web server and
-// release all associated resources. This function blocks until all Mongoose
-// threads are stopped. Context pointer becomes invalid.
+// This function blocks until all Mongoose threads are stopped.
+// Context pointer becomes invalid.
 void mg_stop(struct mg_context *);
 
+// Must be called last, when an application wants to release all associated
+// resources.  Context pointer becomes invalid.
+void mg_destroy(struct mg_context *);
+
 
 // Get the value of particular configuration parameter.
 // The value returned is read-only. Mongoose does not allow changing
@@ -119,6 +126,7 @@
 // set, zero-length string is returned.
 const char *mg_get_option(const struct mg_context *ctx, const char *name);
 
+void *mg_set_options(struct mg_context *ctx, const char **options);
 
 // Return array of strings that represent valid configuration options.
 // For each option, a short name, long name, and default value is returned.
