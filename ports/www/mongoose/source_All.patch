diff -durN mongoose.orig/mongoose.c mongoose/mongoose.c
--- mongoose.orig/mongoose.c	2011-05-17 14:36:53.000000000 -0700
+++ mongoose/mongoose.c	2011-05-17 14:59:16.000000000 -0700
@@ -221,7 +221,10 @@
 #define MAX_CGI_ENVIR_VARS 64
 #define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0]))
 
-#if defined(DEBUG)
+// We don't want this debug console logging - bad during unit tests.
+// If desired, we could route this logging (even in release) through
+// mongoose cry(), which uses a flexible log callback.
+#if defined(MONGOOSE_DEBUG)
 #define DEBUG_TRACE(x) do { \
   flockfile(stdout); \
   printf("*** %lu.%p.%s.%d: ", \
@@ -3308,11 +3311,15 @@
   memset(so, 0, sizeof(*so));
 
   if (sscanf(vec->ptr, "%d.%d.%d.%d:%d%n", &a, &b, &c, &d, &port, &len) == 5) {
-    // IP address to bind to is specified
-    usa->u.sin.sin_addr.s_addr = htonl((a << 24) | (b << 16) | (c << 8) | d);
+// For security, disable this mode.
+//    // IP address to bind to is specified
+//    usa->u.sin.sin_addr.s_addr = htonl((a << 24) | (b << 16) | (c << 8) | d);
+    return (INVALID_SOCKET);
   } else if (sscanf(vec->ptr, "%d%n", &port, &len) == 1) {
-    // Only port number is specified. Bind to all addresses
-    usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+// For security, only use loopback.
+//    // Only port number is specified. Bind to all addresses
+//    usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+    usa->u.sin.sin_addr.s_addr = htonl(/*INADDR_LOOPBACK*/(u_int32_t)0x7f000001);
   } else {
     return 0;
   }
@@ -3331,6 +3338,7 @@
   return 1;
 }
 
+// Return bound port number, or 0 on failure.
 static int set_ports_option(struct mg_context *ctx) {
   const char *list = ctx->config[LISTENING_PORTS];
   int reuseaddr = 1, success = 1;
@@ -3377,6 +3385,15 @@
     close_all_listening_sockets(ctx);
   }
 
+  if (success) {
+    struct usa sa;
+    memset((void *) &sa, 0, sizeof(sa));
+    sa.len = sizeof(sa.u.sin);
+    if (getsockname(sock, &sa.u.sa, &sa.len) != 0) {
+        return 0;
+    }
+    return ntohs((uint16_t) sa.u.sin.sin_port);
+  }
   return success;
 }
 
@@ -3900,14 +3917,19 @@
 
     close_connection(conn);
   }
-  free(conn);
 
-  // Signal master that we're done with connection and exiting
-  (void) pthread_mutex_lock(&ctx->mutex);
-  ctx->num_threads--;
-  (void) pthread_cond_signal(&ctx->cond);
-  assert(ctx->num_threads >= 0);
-  (void) pthread_mutex_unlock(&ctx->mutex);
+  // It's possible to have a connection for which get_socket()
+  // immediately returns false, resulting in a null ctx
+  if (conn->ctx != NULL) {
+    // Signal master that we're done with connection and exiting
+    pthread_mutex_lock(&(conn->ctx->mutex));
+    conn->ctx->num_threads--;
+    pthread_cond_signal(&(conn->ctx->cond));
+    assert(conn->ctx->num_threads >= 0);
+    pthread_mutex_unlock(&(conn->ctx->mutex));
+  }
+
+  free(conn);
 
   DEBUG_TRACE(("exiting"));
 }
@@ -4045,14 +4067,19 @@
   while (ctx->stop_flag != 2) {
     (void) sleep(0);
   }
-  free_context(ctx);
+}
+
+void
+mg_destroy( struct mg_context *ctx)
+{
+    free_context(ctx);
 
 #if defined(_WIN32) && !defined(__SYMBIAN32__)
   (void) WSACleanup();
 #endif // _WIN32
 }
 
-struct mg_context *mg_start(mg_callback_t user_callback, void *user_data,
+struct mg_context *mg_create(mg_callback_t user_callback, void *user_data,
                             const char **options) {
   struct mg_context *ctx;
   const char *name, *value, *default_value;
@@ -4119,11 +4146,15 @@
   (void) pthread_cond_init(&ctx->cond, NULL);
   (void) pthread_cond_init(&ctx->sq_empty, NULL);
   (void) pthread_cond_init(&ctx->sq_full, NULL);
+  return ctx;
+}
 
+int mg_start(struct mg_context *ctx) {
   // Start master (listening) thread
-  start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
+  int success = start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
 
   // Start worker threads
+  int i;
   for (i = 0; i < atoi(ctx->config[NUM_THREADS]); i++) {
     if (start_thread(ctx, (mg_thread_func_t) worker_thread, ctx) != 0) {
       cry(fc(ctx), "Cannot start worker thread: %d", ERRNO);
@@ -4131,6 +4162,5 @@
       ctx->num_threads++;
     }
   }
-
-  return ctx;
+  return success;
 }
diff -durN mongoose.orig/mongoose.h mongoose/mongoose.h
--- mongoose.orig/mongoose.h	2011-05-17 14:36:55.000000000 -0700
+++ mongoose/mongoose.h	2011-05-17 14:37:51.000000000 -0700
@@ -79,7 +79,7 @@
                                 const struct mg_request_info *request_info);
 
 
-// Start web server.
+// Create web server.
 //
 // Parameters:
 //   callback: user defined event handling function or NULL.
@@ -99,17 +99,24 @@
 //
 // Return:
 //   web server context, or NULL on error.
-struct mg_context *mg_start(mg_callback_t callback, void *user_data,
+struct mg_context *mg_create(mg_callback_t callback, void *user_data,
                             const char **options);
 
+// Start the web server.
+// Return 1 on success, 0 on error
+int mg_start(struct mg_context *ctx);
+
 
 // Stop the web server.
 //
-// Must be called last, when an application wants to stop the web server and
-// release all associated resources. This function blocks until all Mongoose
-// threads are stopped. Context pointer becomes invalid.
+// This function blocks until all Mongoose threads are stopped.
+// Context pointer becomes invalid.
 void mg_stop(struct mg_context *);
 
+// Must be called last, when an application wants to release all associated
+// resources.  Context pointer becomes invalid.
+void mg_destroy(struct mg_context *);
+
 
 // Get the value of particular configuration parameter.
 // The value returned is read-only. Mongoose does not allow changing
