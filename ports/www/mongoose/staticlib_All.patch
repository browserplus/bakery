diff -PNaur mongoose.orig/Makefile mongoose/Makefile
--- mongoose.orig/Makefile	2009-07-05 14:48:20.000000000 -0700
+++ mongoose/Makefile	2009-10-30 10:56:08.078125000 -0700
@@ -1,96 +1,32 @@
-# This file is part of Mongoose project, http://code.google.com/p/mongoose
-# $Id: Makefile 433 2009-06-30 12:15:27Z valenok $
+######################################################################
+# Browserplus-specific makefile for mongoose
+# 30 Oct 2009
+#
+# msvc: builds mongoose_s.lib
+# unix: builds libmongoose_s.a
+#
+# For windows we expect CL_FLAGS to be provided in the cmd line.
+# For unix we expect CFLAGS to be set in the env.
+
+LIBSRCS= mongoose.c
+LIBHDRS= mongoose.h
+WINLIB= mongoose_s.lib
+OSXLIB= libmongoose_s.a
+OSXOBJS= $(LIBSRCS:%.c=%.o)
+
+.c.o:
+	$(CC) -c $(CFLAGS) $< -o $@
+
+$(WINLIB): $(LIBSRCS) $(LIBHDRS)
+	del *.obj
+	cl /c $(CL_FLAGS) $(LIBSRCS)
+	lib /nologo *.obj /out:$@
+
+msvc: $(WINLIB)
+
+$(OSXLIB): $(OSXOBJS)
+	$(AR) -r $(OSXLIB) $(OSXOBJS) 2>&1
+	ranlib $(OSXLIB) 2>&1
 
-PROG=	mongoose
-
-all:
-	@echo "make (linux|bsd|solaris|mac|windows|mingw)"
-
-# Possible COPT values: (in brackets are rough numbers for 'gcc -O2' on i386)
-# -DHAVE_MD5		- use system md5 library (-2kb)
-# -DNDEBUG		- strip off all debug code (-5kb)
-# -DDEBUG		- build debug version (very noisy) (+7kb)
-# -DNO_CGI		- disable CGI support (-5kb)
-# -DNO_SSL		- disable SSL functionality (-2kb)
-# -DCONFIG_FILE=\"file\" - use `file' as the default config file
-# -DNO_SSI		- disable SSI support (-4kb)
-# -DHAVE_STRTOUI64	- use system strtoui64() function for strtoull()
-
-
-##########################################################################
-###                 UNIX build: linux, bsd, mac, rtems
-##########################################################################
-
-CFLAGS=		-W -Wall -std=c99 -pedantic -Os -fomit-frame-pointer $(COPT)
-MAC_SHARED=	-flat_namespace -bundle -undefined suppress
-LINFLAGS=	-D_POSIX_SOURCE -D_BSD_SOURCE -D_FILE_OFFSET_BITS=64 \
-		-D_LARGEFILE_SOURCE -ldl -lpthread $(CFLAGS)
-LIB=		_$(PROG).so
-
-linux:
-	$(CC) $(LINFLAGS) mongoose.c -shared -fPIC -fpic -s -o $(LIB)
-	$(CC) $(LINFLAGS) mongoose.c main.c -s -o $(PROG)
-bsd:
-	$(CC) $(CFLAGS) mongoose.c -shared -lpthread -s -fpic -fPIC -o $(LIB)
-	$(CC) $(CFLAGS) mongoose.c main.c -lpthread -s -o $(PROG)
-
-mac:
-	$(CC) $(CFLAGS) $(MAC_SHARED) mongoose.c -lpthread -o $(LIB)
-	$(CC) $(CFLAGS) mongoose.c main.c -lpthread -o $(PROG)
-
-solaris:
-	gcc $(CFLAGS) mongoose.c -lpthread -lnsl \
-		-lsocket -s -fpic -fPIC -shared -o $(LIB)
-	gcc $(CFLAGS) mongoose.c main.c -lpthread -lnsl -lsocket -s -o $(PROG)
-
-
-##########################################################################
-###            WINDOWS build: Using Visual Studio or Mingw
-##########################################################################
-
-# Using Visual Studio Express
-# 1. Download and install Visual Studio Express 2008 to c:\msvc8
-# 2. Download and install Windows SDK to c:\sdk
-# 3. Go to c:\msvc8\vc\bin and start "VIsual Studio 2008 Command prompt"
-#    (or Itanium/amd64 command promt to build x64 version)
-# 4. In the command prompt, go to mongoose directory and do "nmake windows"
-
-#WINDBG=	/Zi /DDEBUG /Od /DDEBUG
-WINDBG=	/DNDEBUG /Os
-WINFLAGS=	/MT /TC /nologo /W4 /DHAVE_STRTOUI64 $(WINDBG) 
-windows:
-	cl $(WINFLAGS) mongoose.c /link /incremental:no /DLL \
-		/DEF:win32\dll.def /out:_$(PROG).dll ws2_32.lib
-	cl $(WINFLAGS) mongoose.c main.c /link /incremental:no \
-		/out:$(PROG).exe ws2_32.lib
-
-# Build for Windows under MinGW
-#MINGWDBG= -DDEBUG -O0
-MINGWDBG= -DNDEBUG -Os
-MINGWOPT= -W -Wall -mthreads -Wl,--subsystem,console $(MINGWDBG) -DHAVE_STDINT
-mingw:
-	gcc $(MINGWOPT) mongoose.c -lws2_32 \
-		-shared -Wl,--out-implib=$(PROG).lib -o _$(PROG).dll
-	gcc $(MINGWOPT) mongoose.c main.c -lws2_32 -ladvapi32 -o $(PROG).exe
-
-
-##########################################################################
-###            Manuals, cleanup, test, release
-##########################################################################
-
-man:
-	cat mongoose.1 | tbl | groff -man -Tascii | col -b > mongoose.1.txt
-	cat mongoose.1 | tbl | groff -man -Tascii | less
-
-# "TEST=unit make test" - perform unit test only
-# "TEST=embedded" - test embedded API by building and testing test/embed.c
-# "TEST=basic_tests" - perform basic tests only (no CGI, SSI..)
-test: do_test
-do_test:
-	perl test/test.pl $(TEST)
-
-release: clean
-	F=mongoose-`perl -lne '/define\s+MONGOOSE_VERSION\s+"(\S+)"/ and print $$1' mongoose.c`.tgz ; cd .. && tar --exclude \*.svn --exclude \*.swp --exclude \*.nfs\* --exclude win32 -czf x mongoose && mv x mongoose/$$F
-
-clean:
-	rm -rf *.o *.core $(PROG) *.obj $(PROG).1.txt *.dSYM *.tgz
+unix: $(OSXLIB)
+	@echo ""
diff -PNaur mongoose.orig/mongoose.c mongoose/mongoose.c
--- mongoose.orig/mongoose.c	2009-07-08 14:08:24.000000000 -0700
+++ mongoose/mongoose.c	2009-10-29 15:16:15.000000000 -0700
@@ -1714,13 +1714,21 @@
 	/* MacOS needs that. If we do not zero it, bind() will fail. */
 	(void) memset(usa, 0, sizeof(*usa));
 
-	if (sscanf(str, "%d.%d.%d.%d:%d", &a, &b, &c, &d, &port) == 5) {
-		/* IP address to bind to is specified */
-		usa->u.sin.sin_addr.s_addr =
-		    htonl((a << 24) | (b << 16) | (c << 8) | d);
+    if (sscanf(str, "%d.%d.%d.%d:%d", &a, &b, &c, &d, &port) == 5) {
+// BROWSERPLUS PATCH - 2009oct27
+// For security, disable this mode.
+//		/* IP address to bind to is specified */
+//		usa->u.sin.sin_addr.s_addr =
+//		    htonl((a << 24) | (b << 16) | (c << 8) | d);
+        return (INVALID_SOCKET);
+// END BROWSERPLUS PATCH
 	} else if (sscanf(str, "%d", &port) == 1) {
-		/* Only port number is specified. Bind to all addresses */
-		usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+// BROWSERPLUS PATCH - 2009oct27
+// For security, only use loopback.
+//      /* Only port number is specified. Bind to all addresses */
+//      usa->u.sin.sin_addr.s_addr = htonl(INADDR_ANY);
+        usa->u.sin.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+// END BROWSERPLUS PATCH
 	} else {
 		return (INVALID_SOCKET);
 	}
@@ -3715,14 +3723,26 @@
 	ctx->num_listeners = 0;
 }
 
-static bool_t
+// BROWSERPLUS PATCH - 2009oct27
+// Return bound port number, or 0 on failure.
+// Note: Since this code now returns a single port number, the "list"
+// argument should only specify a single port, not a comma-delimited list.
+// This limitation is fine for current browserplus usage.
+//static bool_t
+static int
+// END BROWSERPLUS PATCH
 set_ports_option(struct mg_context *ctx, const char *list)
 {
-	SOCKET		sock;
+// BROWSERPLUS PATCH - 2009oct29
+//	SOCKET		sock;
+    SOCKET		sock = INVALID_SOCKET;
+    struct usa sa;
+// END BROWSERPLUS PATCH
 	int		is_ssl;
 	struct vec	vec;
 	struct socket	*listener;
 
+    
 	close_all_listening_sockets(ctx);
 	assert(ctx->num_listeners == 0);
 
@@ -3751,7 +3771,15 @@
 		}
 	}
 
-	return (TRUE);
+// BROWSERPLUS PATCH - 2009oct27
+//  return (TRUE);
+    memset((void *) &sa, 0, sizeof(sa));
+    sa.len = sizeof(sa.u.sin);    
+    if (getsockname(sock, &sa.u.sa, &sa.len) != 0) {
+        return 0;
+    }
+    return ntohs((uint16_t) sa.u.sin.sin_port);
+// END BROWSERPLUS PATCH
 }
 
 static void
@@ -4647,16 +4675,35 @@
 	while (ctx->stop_flag != 2)
 		(void) sleep(1);
 
-	assert(ctx->num_threads == 0);
-	free(ctx);
+    assert(ctx->num_threads == 0);
+    
+// BROWSERPLUS PATCH - 2009oct27
+// Move this to new mg_destroy().
+//	free(ctx);
+//
+//#if defined(_WIN32)
+//	(void) WSACleanup();
+//#endif /* _WIN32 */
+}
+
+// BROWSERPLUS PATCH - 2009oct27
+void
+mg_destroy( struct mg_context *ctx)
+{
+    free(ctx);
 
 #if defined(_WIN32)
-	(void) WSACleanup();
+    (void) WSACleanup();
 #endif /* _WIN32 */
 }
+// END BROWSERPLUS PATCH
 
+// BROWSERPLUS PATCH - 2009oct27
+//struct mg_context *
+//mg_start(void)
 struct mg_context *
-mg_start(void)
+mg_create(void)
+// END BROWSERPLUS PATCH
 {
 	struct mg_context	*ctx;
 	const struct mg_option	*option;
@@ -4722,8 +4769,19 @@
 	(void) pthread_cond_init(&ctx->empty_cond, NULL);
 	(void) pthread_cond_init(&ctx->full_cond, NULL);
 
-	/* Start master (listening) thread */
-	start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
+// BROWSERPLUS PATCH - 2009oct27
+// Move this to new mg_start().    
+//	/* Start master (listening) thread */
+//	start_thread(ctx, (mg_thread_func_t) master_thread, ctx);
 
 	return (ctx);
 }
+
+// BROWSERPLUS PATCH - 2009oct27
+int
+mg_start(struct mg_context *ctx)
+{   
+	/* Start master (listening) thread */
+	return start_thread(ctx, (mg_thread_func_t) master_thread, ctx) == 0;
+}
+// END BROWSERPLUS PATCH
diff -PNaur mongoose.orig/mongoose.h mongoose/mongoose.h
--- mongoose.orig/mongoose.h	2009-05-30 09:57:30.000000000 -0700
+++ mongoose/mongoose.h	2009-10-28 12:10:28.390625000 -0700
@@ -65,23 +65,55 @@
 		const struct mg_request_info *info, void *user_data);
 
 
+// BROWSERPLUS PATCH - 2009oct28
+// We replace the "start/stop" model with a "create/start/stop/destroy"
+// model, which allows clients to make an ephemeral bind call between create
+// and start.
+//
+///*
+// * Start the web server.
+// * This must be the first function called by the application.
+// * It creates a serving thread, and returns a context structure that
+// * can be used to alter the configuration, and stop the server.
+// */
+//struct mg_context *mg_start(void);
+//
+///*
+// * Stop the web server.
+// * Must be called last, when an application wants to stop the web server and
+// * release all associated resources. This function blocks until all Mongoose
+// * threads are stopped. Context pointer becomes invalid.
+// */
+//void mg_stop(struct mg_context *);
+
 /*
- * Start the web server.
+ * Create the web server.
  * This must be the first function called by the application.
  * It creates a serving thread, and returns a context structure that
  * can be used to alter the configuration, and stop the server.
  */
-struct mg_context *mg_start(void);
+struct mg_context *mg_create(void);
 
+/*
+ * Start the web server.
+ * Return 1 on success, 0 on error 
+ */
+int mg_start(struct mg_context *ctx);
 
 /*
  * Stop the web server.
- * Must be called last, when an application wants to stop the web server and
- * release all associated resources. This function blocks until all Mongoose
- * threads are stopped. Context pointer becomes invalid.
+ * This function blocks until all Mongoose threads are stopped.
+ * Context pointer becomes invalid.
  */
 void mg_stop(struct mg_context *);
 
+/*
+ * Must be called last, when an application wants to release all associated
+ * resources.  Context pointer becomes invalid.
+ */
+void mg_destroy(struct mg_context *);
+// END BROWSERPLUS PATCH
+
 
 /*
  * Return current value of a particular option.
