diff -durN libarchive-2.8.4.orig/CMakeLists.txt libarchive-2.8.4/CMakeLists.txt
--- libarchive-2.8.4.orig/CMakeLists.txt	2010-06-27 11:48:32.000000000 -0700
+++ libarchive-2.8.4/CMakeLists.txt	2011-05-10 12:22:35.000000000 -0700
@@ -46,8 +46,14 @@
 OPTION(ENABLE_CPIO_SHARED "Enable dynamic build of cpio" OFF)
 OPTION(ENABLE_XATTR "Enable extended attribute support" ON)
 OPTION(ENABLE_ACL "Enable ACL support" ON)
+OPTION(ENABLE_XML "Enable XML support if available" ON)
+OPTION(ENABLE_LZMA "Enable LZMA support if available" ON)
 OPTION(ENABLE_TEST "Enable unit and regression tests" ON)
 
+IF(DEFINED ADDITIONAL_LINK_DIRS)
+  LINK_DIRECTORIES(${ADDITIONAL_LINK_DIRS})
+ENDIF(DEFINED ADDITIONAL_LINK_DIRS)
+
 IF(ENABLE_TEST)
 	ENABLE_TESTING()
 ENDIF(ENABLE_TEST)
@@ -172,7 +178,12 @@
 #
 # Find LZMA
 #
-FIND_PACKAGE(LZMA)
+IF(ENABLE_LZMA)
+  FIND_PACKAGE(LZMA)
+ELSE(ENABLE_LZMA)
+  SET(LZMA_FOUND 0)
+  SET(LZMADEC_FOUND 0)
+ENDIF(ENABLE_LZMA)
 IF(LZMA_FOUND)
   SET(HAVE_LIBLZMA 1)
   SET(HAVE_LZMA_H 1)
@@ -210,6 +221,7 @@
 
 # Alphabetize the rest unless there's a compelling reason
 LA_CHECK_INCLUDE_FILE("acl/libacl.h" HAVE_ACL_LIBACL_H)
+LA_CHECK_INCLUDE_FILE("attr/xattr.h" HAVE_ATTR_XATTR_H)
 LA_CHECK_INCLUDE_FILE("ctype.h" HAVE_CTYPE_H)
 LA_CHECK_INCLUDE_FILE("direct.h" HAVE_DIRECT_H)
 LA_CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DLFCN_H)
@@ -237,6 +249,7 @@
 LA_CHECK_INCLUDE_FILE("strings.h" HAVE_STRINGS_H)
 LA_CHECK_INCLUDE_FILE("sys/acl.h" HAVE_SYS_ACL_H)
 LA_CHECK_INCLUDE_FILE("sys/cdefs.h" HAVE_SYS_CDEFS_H)
+LA_CHECK_INCLUDE_FILE("sys/extattr.h" HAVE_SYS_EXTATTR_H)
 LA_CHECK_INCLUDE_FILE("sys/ioctl.h" HAVE_SYS_IOCTL_H)
 LA_CHECK_INCLUDE_FILE("sys/mkdev.h" HAVE_SYS_MKDEV_H)
 LA_CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
@@ -261,207 +274,104 @@
 #
 # Find OpenSSL
 #
-IF(ENABLE_OPENSSL)
-  FIND_PACKAGE(OpenSSL)
-ENDIF()
+# openssl must be present, and by the way, screw cmake's helpful
+# FindPackage stuff
+SET(OPENSSL_FOUND 1)
+IF (NOT DEFINED OPENSSL_INCLUDE_DIR)
+  MESSAGE(FATAL_ERROR "define OPENSSL_INCLUDE_DIR, doofus")
+ENDIF (NOT DEFINED OPENSSL_INCLUDE_DIR)
+IF (NOT DEFINED OPENSSL_LIBRARIES)
+  MESSAGE(FATAL_ERROR "define OPENSSL_LIBRARIES, doofus")
+ENDIF (NOT DEFINED OPENSSL_LIBRARIES)
+INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
+LIST(APPEND ADDITIONAL_LIBS ${OPENSSL_LIBRARIES})
 
 #
-# How to prove that HASH functions, which have several names on various
-# platforms, can be mapped to archive_{hash name}_init,
-# archive_{hash name}_update and archive_{hash name}_final through
-# archive_hash.h
+# Check MD5/RMD160/SHA headers
 #
-MACRO(CHECK_MD HASH IMPLEMENTATIONS)
-    IF(HAVE_SYS_TYPES_H)
-        SET(HASH_HEADER_CONFIG "#define HAVE_SYS_TYPES_H 1\n")
-    ELSE(HAVE_SYS_TYPES_H)
-        SET(HASH_HEADER_CONFIG "")
-    ENDIF(HAVE_SYS_TYPES_H)
-
-    FOREACH(IMPLEMENTATION ${IMPLEMENTATIONS})
-      IF(NOT DEFINED ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-	STRING(TOLOWER "${HASH}" lower_hash)
-	STRING(TOUPPER "${HASH}" hash)
-
-	SET(HASH_REQUIRED_INCLUDES)
-	SET(TRY_HASH_REQUIRED_INCLUDES
-	  "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_CURRENT_SOURCE_DIR}/libarchive")
-	SET(HASH_REQUIRED_LIBS)
-	SET(TRY_HASH_REQUIRED_LIBS)
-	IF ("${IMPLEMENTATION}" MATCHES "^OPENSSL$" AND OPENSSL_FOUND)
-	    SET(HASH_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
-	    SET(TRY_HASH_REQUIRED_INCLUDES
-	      "${TRY_HASH_REQUIRED_INCLUDES};${OPENSSL_INCLUDE_DIR}")
-	    SET(HASH_REQUIRED_LIBS ${OPENSSL_LIBRARIES})
-	    SET(TRY_HASH_REQUIRED_LIBS
-	        "-DLINK_LIBRARIES:STRING=${OPENSSL_LIBRARIES}")
-	ENDIF ("${IMPLEMENTATION}" MATCHES "^OPENSSL$" AND OPENSSL_FOUND)
-
-	SET(SOURCE "#define ${hash}_COMPILE_TEST
-#define ARCHIVE_HASH_${hash}_${IMPLEMENTATION}
-#define __LIBARCHIVE_BUILD
-${HASH_HEADER_CONFIG}
-#include \"archive_hash.h\"
-
-int
-main(int argc, char **argv)
-{
-	archive_${lower_hash}_ctx ctx;
-
-	archive_${lower_hash}_init(&ctx);
-	archive_${lower_hash}_update(&ctx, *argv, argc);
-	archive_${lower_hash}_final(&ctx, *argv);
-	return 0;
-}
-")
-
-	FILE(WRITE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_hash_md.c" "${SOURCE}")
-	MESSAGE(STATUS "Checking support for ARCHIVE_HASH_${HASH}_${IMPLEMENTATION}")
-
-	TRY_COMPILE(ARCHIVE_HASH_${HASH}_${IMPLEMENTATION}
-	  ${CMAKE_BINARY_DIR}
-	  ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_hash_md.c
-	  CMAKE_FLAGS
-	   "${TRY_HASH_REQUIRED_LIBS}"
-	   "${TRY_HASH_REQUIRED_INCLUDES}"
-	  OUTPUT_VARIABLE OUTPUT)
-
-	IF (ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-	    MESSAGE(STATUS "Checking support for ARCHIVE_HASH_${HASH}_${IMPLEMENTATION} -- found")
-	    IF (HASH_REQUIRED_INCLUDES)
-	        INCLUDE_DIRECTORIES(${HASH_REQUIRED_INCLUDES})
-	    ENDIF (HASH_REQUIRED_INCLUDES)
-	    IF (HASH_REQUIRED_LIBS)
-	        LIST(APPEND ADDITIONAL_LIBS ${HASH_REQUIRED_LIBS})
-	        LIST(REMOVE_DUPLICATES ADDITIONAL_LIBS)
-	    ENDIF (HASH_REQUIRED_LIBS)
-	    BREAK()
-	ENDIF (ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-
-	MESSAGE(STATUS "Checking support for ARCHIVE_HASH_${HASH}_${IMPLEMENTATION} -- not found")
-    	FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
-    	    "Checking support for ARCHIVE_HASH_${HASH}_${IMPLEMENTATION} failed with the following output:\n"
-    	    "${OUTPUT}\n"
-    	    "Source file was:\n${SOURCE}\n")
-      ELSE(NOT DEFINED ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-        IF(ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-           BREAK()
-        ENDIF(ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-      ENDIF(NOT DEFINED ARCHIVE_HASH_${HASH}_${IMPLEMENTATION})
-    ENDFOREACH(IMPLEMENTATION)
-ENDMACRO(CHECK_MD HASH IMPLEMENTATIONS)
+LA_CHECK_INCLUDE_FILE("md5.h" HAVE_MD5_H)
+SET(HAVE_OPENSSL_MD5_H 1)
+SET(HAVE_OPENSSL_RIPEMD_H 1)
+SET(HAVE_OPENSSL_SHA_H 1)
+LA_CHECK_INCLUDE_FILE("ripemd.h" HAVE_RIPEMD_H)
+LA_CHECK_INCLUDE_FILE("rmd160.h" HAVE_RMD160_H)
+LA_CHECK_INCLUDE_FILE("sha.h" HAVE_SHA_H)
+LA_CHECK_INCLUDE_FILE("sha1.h" HAVE_SHA1_H)
+LA_CHECK_INCLUDE_FILE("sha2.h" HAVE_SHA2_H)
+LA_CHECK_INCLUDE_FILE("sha256.h" HAVE_SHA256_H)
 
 #
-# HASH functions on Windows is defined at archive_windows.c, thus we do not
-# need the test what the functions can be mapped to archive_{hash name}_init,
-# archive_{hash name}_update and archive_{hash name}_final.
-# The functions on Windows use CALG_{hash name} macro to create a crypt object
-# and then we need to know what CALG_{hash name} macros is available to show
-# ARCHIVE_HASH_{hash name}_WIN macros because Windows 2000 and earlier version
-# of Windows XP do not support SHA256, SHA384 and SHA512.
+# Find MD5/RMD160/SHA library
 #
-MACRO(CHECK_HASH_WIN HASH_LIST)
-  IF(WIN32 AND NOT CYGWIN)
-    FOREACH(HASH ${HASH_LIST})
-      IF(NOT DEFINED ARCHIVE_HASH_${HASH}_WIN)
-	STRING(TOUPPER "${HASH}" hash)
-	SET(ALGID "")
-	IF ("${HASH}" MATCHES "^MD5$")
-	    SET(ALGID "CALG_MD5")
-	ENDIF ("${HASH}" MATCHES "^MD5$")
-	IF ("${HASH}" MATCHES "^SHA1$")
-	    SET(ALGID "CALG_SHA1")
-	ENDIF ("${HASH}" MATCHES "^SHA1$")
-	IF ("${HASH}" MATCHES "^SHA256$")
-	    SET(ALGID "CALG_SHA_256")
-	ENDIF ("${HASH}" MATCHES "^SHA256$")
-	IF ("${HASH}" MATCHES "^SHA384$")
-	    SET(ALGID "CALG_SHA_384")
-	ENDIF ("${HASH}" MATCHES "^SHA384$")
-	IF ("${HASH}" MATCHES "^SHA512$")
-	    SET(ALGID "CALG_SHA_512")
-	ENDIF ("${HASH}" MATCHES "^SHA512$")
-
-	SET(SOURCE "#define ${hash}_COMPILE_TEST
-#define _WIN32_WINNT ${_WIN32_WINNT}
-#define WINVER ${WINVER}
-#include <windows.h>
-#include <wincrypt.h>
-
-int
-main(int argc, char **argv)
-{
-	return ${ALGID};
-}
-")
-	SET(SOURCE_FILE "${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_hash_win.c")
-
-	FILE(WRITE "${SOURCE_FILE}" "${SOURCE}")
-	MESSAGE(STATUS "Checking support for ARCHIVE_HASH_${HASH}_WIN")
-
-	TRY_COMPILE(ARCHIVE_HASH_${HASH}_WIN
-	  ${CMAKE_BINARY_DIR}
-	  ${SOURCE_FILE}
-	  CMAKE_FLAGS "-DINCLUDE_DIRECTORIES:STRING=${CMAKE_CURRENT_SOURCE_DIR}/libarchive"
-	  OUTPUT_VARIABLE OUTPUT)
-
-	IF (ARCHIVE_HASH_${HASH}_WIN)
-	    MESSAGE(STATUS
-	        "Checking support for ARCHIVE_HASH_${HASH}_WIN -- found")
-	ELSE (ARCHIVE_HASH_${HASH}_WIN)
-	    MESSAGE(STATUS
-	         "Checking support for ARCHIVE_HASH_${HASH}_WIN -- not found")
-    	    FILE(APPEND
-	        ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log
-                "Checking support for ARCHIVE_HASH_${HASH}_WIN failed with the following output:\n"
-        	"${OUTPUT}\n"
-        	"Source file was:\n${SOURCE}\n")
-	ENDIF (ARCHIVE_HASH_${HASH}_WIN)
-
-      ENDIF(NOT DEFINED ARCHIVE_HASH_${HASH}_WIN)
-    ENDFOREACH(HASH)
-  ENDIF(WIN32 AND NOT CYGWIN)
-ENDMACRO(CHECK_HASH_WIN HASH_LIST)
+FIND_LIBRARY(CRYPTO_LIBRARY NAMES crypto)
+IF(CRYPTO_LIBRARY)
+  LIST(APPEND ADDITIONAL_LIBS ${CRYPTO_LIBRARY})
+ELSE(CRYPTO_LIBRARY)
+  IF(NOT OPENSSL_FOUND)
+    FIND_LIBRARY(MD_LIBRARY NAMES md)
+    IF(MD_LIBRARY)
+      LIST(APPEND ADDITIONAL_LIBS ${MD_LIBRARY})
+    ENDIF(MD_LIBRARY)
+  ENDIF(NOT OPENSSL_FOUND)
+ENDIF(CRYPTO_LIBRARY)
 
 #
-# Check MD5/RMD160/SHA support
+# Check MD5/RMD160/SHA functions
 #
-CHECK_MD(MD5 "LIBC;LIBSYSTEM;OPENSSL")
-CHECK_MD(RMD160 "LIBC;OPENSSL")
-CHECK_MD(SHA1 "LIBC;LIBSYSTEM;OPENSSL")
-CHECK_MD(SHA256 "LIBC;LIBC2;LIBC3;LIBSYSTEM;OPENSSL")
-CHECK_MD(SHA384 "LIBC;LIBC2;LIBC3;LIBSYSTEM;OPENSSL")
-CHECK_MD(SHA512 "LIBC;LIBC2;LIBC3;LIBSYSTEM;OPENSSL")
-CHECK_HASH_WIN("MD5;SHA1;SHA256;SHA384;SHA512")
+SET(CMAKE_REQUIRED_LIBRARIES ${ADDITIONAL_LIBS})
+IF(HAVE_MD5_H)
+  CHECK_SYMBOL_EXISTS(MD5Init                  "md5.h"         HAVE_MD5INIT)
+ENDIF(HAVE_MD5_H)
+IF(HAVE_RMD160_H)
+  CHECK_SYMBOL_EXISTS(RMD160Init               "rmd160.h"      HAVE_RMD160INIT)
+ENDIF(HAVE_RMD160_H)
+IF(HAVE_SHA2_H)
+  CHECK_SYMBOL_EXISTS(SHA256Init               "sha2.h"        HAVE_SHA256INIT)
+  CHECK_SYMBOL_EXISTS(SHA384Init               "sha2.h"        HAVE_SHA384INIT)
+  CHECK_SYMBOL_EXISTS(SHA512Init               "sha2.h"        HAVE_SHA512INIT)
+  CHECK_SYMBOL_EXISTS(SHA256_Init              "sha2.h"        HAVE_SHA256_INIT)
+  CHECK_SYMBOL_EXISTS(SHA384_Init              "sha2.h"        HAVE_SHA384_INIT)
+  CHECK_SYMBOL_EXISTS(SHA512_Init              "sha2.h"        HAVE_SHA512_INIT)
+ELSEIF(HAVE_OPENSSL_SHA_H)
+  CHECK_SYMBOL_EXISTS(SHA256_Init              "openssl/sha.h" HAVE_OPENSSL_SHA256_INIT)
+  CHECK_SYMBOL_EXISTS(SHA384_Init              "openssl/sha.h" HAVE_OPENSSL_SHA384_INIT)
+  CHECK_SYMBOL_EXISTS(SHA512_Init              "openssl/sha.h" HAVE_OPENSSL_SHA512_INIT)
+ENDIF()
+SET(CMAKE_REQUIRED_LIBRARIES "")
 
 #
 # Find Libxml2
 #
-FIND_PACKAGE(LibXml2)
-IF(LIBXML2_FOUND)
-  INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
-  LIST(APPEND ADDITIONAL_LIBS ${LIBXML2_LIBRARIES})
-  SET(HAVE_LIBXML2 1)
-  # libxml2's include files use iconv.h
-  # We need a directory path of iconv.h so that it won't fail to check
-  # "libxml/xmlreader.h".
-  FIND_PATH(ICONV_INCLUDE_DIR iconv.h)
-  INCLUDE_DIRECTORIES(${ICONV_INCLUDE_DIR})
-  SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR} ${LIBXML2_INCLUDE_DIR})
-  CHECK_INCLUDE_FILES("libxml/xmlreader.h" HAVE_LIBXML_XMLREADER_H)
-  SET(CMAKE_REQUIRED_INCLUDES "")
-ELSE(LIBXML2_FOUND)
-  #
-  # Find Expat
-  #
-  FIND_PACKAGE(EXPAT)
-  IF(EXPAT_FOUND)
-    INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIR})
-    LIST(APPEND ADDITIONAL_LIBS ${EXPAT_LIBRARIES})
-    SET(HAVE_LIBEXPAT 1)
-    LA_CHECK_INCLUDE_FILE("expat.h" HAVE_EXPAT_H)
-  ENDIF(EXPAT_FOUND)
-ENDIF(LIBXML2_FOUND)
+IF (ENABLE_XML)
+  FIND_PACKAGE(LibXml2)
+
+  IF(LIBXML2_FOUND)
+    INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
+    LIST(APPEND ADDITIONAL_LIBS ${LIBXML2_LIBRARIES})
+    SET(HAVE_LIBXML2 1)
+    # libxml2's include files use iconv.h
+    # We need a directory path of iconv.h so that it won't fail to check
+    # "libxml/xmlreader.h".
+    FIND_PATH(ICONV_INCLUDE_DIR iconv.h)
+    SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR} ${LIBXML2_INCLUDE_DIR})
+    CHECK_INCLUDE_FILES("libxml/xmlreader.h" HAVE_LIBXML_XMLREADER_H)
+    SET(CMAKE_REQUIRED_INCLUDES "")
+  ELSE(LIBXML2_FOUND)
+    #
+    # Find Expat
+    #
+    FIND_PACKAGE(EXPAT)
+    IF(EXPAT_FOUND)
+      INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIR})
+      LIST(APPEND ADDITIONAL_LIBS ${EXPAT_LIBRARIES})
+      SET(HAVE_LIBEXPAT 1)
+      LA_CHECK_INCLUDE_FILE("expat.h" HAVE_EXPAT_H)
+    ENDIF(EXPAT_FOUND)
+  ENDIF(LIBXML2_FOUND)
+ELSE (ENABLE_XML)
+  SET(EXPAT_FOUND 0)
+  SET(LIBXML2_FOUND 0)
+ENDIF (ENABLE_XML)
 
 #
 # Check functions
